% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%                                                                  
% Update_RCONST - function to update rate constants                
%   Arguments :                                                    
%                                                                  
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%                                                                  
% Generated by KPP - symbolic chemistry Kinetics PreProcessor      
%     KPP is developed at CGRER labs University of Iowa by         
%     Valeriu Damian & Adrian Sandu                                
%                                                                  
% File                 : mech_Update_RCONST.m                      
% Time                 : Sun Jul  5 19:51:30 1970                  
% Working directory    : /proju/wrf-chem/thomas/mechanism-noHalogens
% Equation file        : mech.kpp                                  
% Output root filename : mech                                      
%                                                                  
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function   mech_Update_RCONST ( )

global SUN TEMP RCONST


% Begin INLINED RCONST                                             


global GStruct TIME
M_conc = get_M_CONC();

% End INLINED RCONST                                               

   RCONST(1) = (jrates('J_O3_O3P',TIME,GStruct)) ;
   RCONST(2) = (jrates('J_O3_O1D',TIME,GStruct)) ;
   RCONST(3) = (jrates('J_H2O2',TIME,GStruct)) ;
   RCONST(4) = (jrates('J_NO2',TIME,GStruct)) ;
   RCONST(5) = (jrates('J_NO3_NO',TIME,GStruct)) ;
   RCONST(6) = (jrates('J_NO3_NO2',TIME,GStruct)) ;
   RCONST(7) = (jrates('J_HNO2',TIME,GStruct)) ;
   RCONST(8) = (jrates('J_HNO3',TIME,GStruct)) ;
   RCONST(9) = (jrates('J_HNO4',TIME,GStruct)) ;
   RCONST(10) = (jrates('J_CH2O_CO',TIME,GStruct)) ;
   RCONST(11) = (jrates('J_CH2O_HCO',TIME,GStruct)) ;
   RCONST(12) = (jrates('J_CH3CHO_CH3',TIME,GStruct)) ;
   RCONST(13) = (jrates('J_CH3CHO_CH3CO',TIME,GStruct)) ;
   RCONST(14) = (jrates('J_CH3_COCH3',TIME,GStruct)) ;
   RCONST(15) = (jrates('J_C2H5CHO',TIME,GStruct)) ;
   RCONST(16) = (jrates('J_CH3COCH2CH3',TIME,GStruct)) ;
   RCONST(17) = (jrates('J_CH3COCH2CH3',TIME,GStruct)) ;
   RCONST(18) = (jrates('J_CH2OHCOCH3_CH3CO',TIME,GStruct)) ;
   RCONST(19) = (jrates('J_CH2CCH3CHO',TIME,GStruct)) ;
   RCONST(20) = (jrates('J_CH3COCHCH2',TIME,GStruct)) ;
   RCONST(21) = (jrates('J_CHOCHO_H2',TIME,GStruct)) ;
   RCONST(22) = (jrates('J_CHOCHO_CH2O',TIME,GStruct)) ;
   RCONST(23) = (jrates('J_CHOCHO_HCO',TIME,GStruct)) ;
   RCONST(24) = (jrates('J_CH3COCH3',TIME,GStruct)) ;
   RCONST(25) = (jrates('J_CH3COCH3',TIME,GStruct)) ;
   RCONST(26) = (jrates('J_CH3COCH3',TIME,GStruct)) ;
   RCONST(27) = (jrates('J_BALD',TIME,GStruct)) ;
   RCONST(28) = (jrates('J_CH3OOH',TIME,GStruct)) ;
   RCONST(29) = (jrates('J_CH3COOH',TIME,GStruct)) ;
   RCONST(30) = (jrates('J_CH3CO_OOH',TIME,GStruct)) ;
   RCONST(31) = (jrates('J_CH3CH2ONO2',TIME,GStruct)) ;
   RCONST(32) = (jrates('J_CH3COOONO2_CH3CO_OO',TIME,GStruct)) ;
   RCONST(33) = (jrates('J_CH3COOONO2_CH3CO_O',TIME,GStruct)) ;
   RCONST(34) = (1.70E-12*exp(-940.0/TEMP)) ;
   RCONST(35) = (1.00E-14*exp(-490.0/TEMP)) ;
   RCONST(36) = (1.40E-12*exp(-1310.0/TEMP)) ;
   RCONST(37) = (1.40E-13*exp(-2470.0/TEMP)) ;
   RCONST(38) = (M_conc*5.74E-34*(TEMP/300.0)^(-2.6)) ;
   RCONST(39) = (8.00E-12*exp(-2060.0/TEMP)) ;
   RCONST(40) = (3.20E-11*exp(67.0/TEMP)) ;
   RCONST(41) = (2.00E-11*exp(130.0/TEMP)) ;
   RCONST(43) = (7.70E-12*exp(-2100.0/TEMP)) ;
   RCONST(44) = (4.80E-11*exp(250.0/TEMP)) ;
   RCONST(45) = (2.2E-13*exp(600./TEMP)+1.90E-33*M_conc*exp(980./TEMP) ...
                 );
   RCONST(46)=(3.08E-34*exp(2800./TEMP)+2.59E-54*M_conc*exp(3180./TEMP));
   RCONST(47) = (2.90E-12*exp(-160.0/TEMP)) ;
   RCONST(48) = (RACM_TROE(TEMP,M_conc,9.00E-32,1.5,3.00E-11,0.0)) ;
   RCONST(49) = (RACM_TROE(TEMP,M_conc,7.00E-31,2.6,3.60E-11,0.1)) ;
   RCONST(50) = (3.45E-12*exp(270.0/TEMP)) ;
   RCONST(51) = (RACM_reaction51(TEMP)) ;
   RCONST(52) = (3.30E-39*exp(530.0/TEMP)) ;
   RCONST(53) = (2.50E-12*exp(260.0/TEMP)) ;
   RCONST(54) = (5.50E-12*exp(188.0/TEMP)) ;
   RCONST(55) = (RACM_TROE(TEMP,M_conc,2.50E-31,1.8,2.20E-11,0.7)) ;
   RCONST(56) = (RACM_TROE(TEMP,M_conc,1.51E-30,3.00,2.58E-11,0.0)) ;
   RCONST(57) = (RACM_reaction57(TEMP,M_conc)) ;
   RCONST(60) = (1.80E-11*exp(110.0/TEMP)) ;
   RCONST(61) = (4.50E-14*exp(-1260.0/TEMP)) ;
   RCONST(62) = (8.50E-13*exp(-2450.0/TEMP)) ;
   RCONST(63) = (RACM_TROE(TEMP,M_conc,2.00E-30,4.4,1.40E-12,0.7)) ;
   RCONST(64) = (RACM_TROE_EQUIL(TEMP,M_conc,2.20E-30,4.4,1.40E-12,0.7, ...
                 2.70E-27,11000.0));
   RCONST(66) = (RACM_TROE(TEMP,M_conc,2.0E-31,3.4,2.90E-12,1.1)) ;
   RCONST(67) = (RACM_TROE_EQUIL(TEMP,M_conc,2.00E-31,3.4,2.90E-12,1.1, ...
                 2.10E-27,10900.));
   RCONST(68) = (1.30E-12*exp(380.0/TEMP)) ;
   RCONST(69) = (RACM_TROE(TEMP,M_conc,3.30E-31,4.3,1.60E-12,0.0)) ;
   RCONST(70) = (1.44E-13*(1.+0.8*M_conc/4E19)) ;
   RCONST(71) = (1.85E-12*exp(-1690.0/TEMP)) ;
   RCONST(72) = (6.90E-12*exp(-1000.0/TEMP)) ;
   RCONST(73) = (7.68E-12*exp(-370.0/TEMP)) ;
   RCONST(74) = (1.01E-11*exp(-245.0/TEMP)) ;
   RCONST(75) = (2.82E-11*exp(-273.0/TEMP)) ;
   RCONST(76) = (RACM_TROE(TEMP,M_conc,1.00E-28,4.5,8.80E-12,.85)) ;
   RCONST(77) = (5.72E-12*exp(500.0/TEMP)) ;
   RCONST(78) = (1.33E-11*exp(500.0/TEMP)) ;
   RCONST(79) = (1.48E-11*exp(448.0/TEMP)) ;
   RCONST(80) = (RACM_TROE(TEMP,M_conc,5.50E-30,0.0,8.30E-13,-2.0)) ;
   RCONST(81) = (2.33E-12*exp(-193.0/TEMP)) ;
   RCONST(82) = (1.81E-12*exp(354.0/TEMP)) ;
   RCONST(86) = (2.70E-11*exp(390.0/TEMP)) ;
   RCONST(87) = (1.21E-11*exp(440.0/TEMP)) ;
   RCONST(88) = (4.20E-11*exp(401.0/TEMP)) ;
   RCONST(89) = (5.50E-12*exp(125.0/TEMP)) ;
   RCONST(90) = (4.70E-12*exp(345.0/TEMP)) ;
   RCONST(91) = (4.90E-12*exp(405.0/TEMP)) ;
   RCONST(92) = (1.39E-13+3.72E-11*exp(-2044./TEMP)) ;
   RCONST(93) = (1.50E-12*exp(-90.0/TEMP)) ;
   RCONST(94) = (2.80E-12*exp(10.0/TEMP)) ;
   RCONST(96) = (8.0E-12*exp(380./TEMP)) ;
   RCONST(97) = (2.60E-12*exp(610./TEMP)) ;
   RCONST(98) = (5.77E-12*exp(533.0/TEMP)) ;
   RCONST(100) = (9.26E-13*exp(830.0/TEMP)) ;
   RCONST(101) = (2.8E-11*exp(175.0/TEMP)) ;
   RCONST(102) = (2.8E-11*exp(175.0/TEMP)) ;
   RCONST(104) = (5.32E-12*exp(243.0/TEMP)) ;
   RCONST(105) = (6.75E-12*exp(405.0/TEMP)) ;
   RCONST(107) = (2.8E-11*exp(175.0/TEMP)) ;
   RCONST(109) = (2.85E-12*exp(-345.0/TEMP)) ;
   RCONST(110) = (3.00E-12*exp(20.0/TEMP)) ;
   RCONST(111) = (2.60E-12*exp(200.0/TEMP)) ;
   RCONST(113) = (2.90E-12*exp(190.0/TEMP)) ;
   RCONST(114) = (3.40E-12*exp(190.0/TEMP)) ;
   RCONST(118) = (2.20E-14*exp(1012.0/TEMP)) ;
   RCONST(119) = (2.93E-12*exp(190.0/TEMP)) ;
   RCONST(123) = (5.31E-12*exp(-260.0/TEMP)) ;
   RCONST(124) = (5.60E-12*exp(270.0/TEMP)) ;
   RCONST(125) = (1.30E-11*exp(-0.0)) ;
   RCONST(126) = (9.14E-15*exp(-2580.0/TEMP)) ;
   RCONST(127) = (4.33E-15*exp(-1800.0/TEMP)) ;
   RCONST(128) = (4.40E-15*exp(-845.0/TEMP)) ;
   RCONST(129) = (1.34E-14*exp(-2283.0/TEMP)) ;
   RCONST(130) = (7.86E-15*exp(-1913.0/TEMP)) ;
   RCONST(131) = (5.00E-16*exp(-530.0/TEMP)) ;
   RCONST(132) = (2.95E-15*exp(-783.0/TEMP)) ;
   RCONST(133) = (1.36E-15*exp(-2112.0/TEMP)) ;
   RCONST(134) = (7.51E-16*exp(-1520.0/TEMP)) ;
   RCONST(141) = (RACM_THERMAL_T2(TEMP,4.88E-18,2282.0)) ;
   RCONST(142) = (1.79E-13*exp(-450.0/TEMP)) ;
   RCONST(143) = (8.64E-13*exp(450.0/TEMP)) ;
   RCONST(145) = (3.03E-12*exp(-446.0/TEMP)) ;
   RCONST(146) = (1.19E-12*exp(490.0/TEMP)) ;
   RCONST(148) = (2.00E-12*exp(-2440.0/TEMP)) ;
   RCONST(149) = (1.40E-12*exp(-1900.0/TEMP)) ;
   RCONST(150) = (3.76E-12*exp(-1900.0/TEMP)) ;
   RCONST(152) = (5.02E-13*exp(-1076.0/TEMP)) ;
   RCONST(153) = (2.90E-12*exp(-1900.0/TEMP)) ;
   RCONST(154) = (3.76E-12*exp(-1900.0/TEMP)) ;
   RCONST(157) = (2.87E-13*exp(-1000.0/TEMP)) ;
   RCONST(159) = (2.20E-14*exp(-500.0/TEMP)) ;
   RCONST(166) = (RACM_TROE(TEMP,M_conc,9.70E-29,5.6,9.3E-12,1.5)) ;
   RCONST(167) = (RACM_TROE_EQUIL(TEMP,M_conc,9.70E-29,5.6,9.30E-12, ...
                  1.5,9.E-29,14000.));
   RCONST(168) = (RACM_TROE(TEMP,M_conc,9.70E-29,5.6,9.3E-12,1.5)) ;
   RCONST(169) = (RACM_TROE_EQUIL(TEMP,M_conc,9.70E-29,5.6,9.30E-12, ...
                  1.5,9.E-29,14000.));
   RCONST(170) = (2.80E-12*exp(181.0/TEMP)) ;
   RCONST(171) = (1.60E+16*exp(-13486.0/TEMP)) ;
   RCONST(172) = (2.80E-12*exp(300.0/TEMP)) ;
   RCONST(173) = (2.60E-12*exp(365.0/TEMP)) ;
   RCONST(180) = (2.54E-12*exp(360.0/TEMP)) ;
   RCONST(182) = (2.70E-12*exp(360.0/TEMP)) ;
   RCONST(183) = (2.70E-12*exp(360.0/TEMP)) ;
   RCONST(185) = (2.70E-12*exp(360.0/TEMP)) ;
   RCONST(186) = (2.70E-12*exp(360.0/TEMP)) ;
   RCONST(187) = (2.70E-12*exp(360.0/TEMP)) ;
   RCONST(188) = (2.43E-12*exp(360.0/TEMP)) ;
   RCONST(191) = (8.10E-12*exp(270.0/TEMP)) ;
   RCONST(192) = (8.10E-12*exp(270.0/TEMP)) ;
   RCONST(193) = (2.90E-12*exp(300.0/TEMP)) ;
   RCONST(196) = (2.54E-12*exp(360.0/TEMP)) ;
   RCONST(197) = (2.54E-12*exp(360.0/TEMP)) ;
   RCONST(198) = (2.54E-12*exp(360.0/TEMP)) ;
   RCONST(199) = (2.54E-12*exp(360.0/TEMP)) ;
   RCONST(201) = (4.00E-12*exp(-0.0)) ;
   RCONST(202) = (2.70E-12*exp(360.0/TEMP)) ;
   RCONST(203) = (2.70E-12*exp(360.0/TEMP)) ;
   RCONST(207) = (2.70E-12*exp(360.0/TEMP)) ;
   RCONST(212) = (4.10E-13*exp(750.0/TEMP)) ;
   RCONST(213) = (7.50E-13*exp(700.0/TEMP)) ;
   RCONST(214) = (1.66E-13*exp(1300.0/TEMP)) ;
   RCONST(215) = (1.66E-13*exp(1300.0/TEMP)) ;
   RCONST(216) = (1.66E-13*exp(1300.0/TEMP)) ;
   RCONST(217) = (1.90E-13*exp(1300.0/TEMP)) ;
   RCONST(218) = (1.66E-13*exp(1300.0/TEMP)) ;
   RCONST(219) = (1.66E-13*exp(1300.0/TEMP)) ;
   RCONST(220) = (2.91E-13*exp(1300.0/TEMP)) ;
   RCONST(221) = (3.75E-13*exp(980.0/TEMP)) ;
   RCONST(222) = (3.75E-13*exp(980.0/TEMP)) ;
   RCONST(223) = (3.75E-13*exp(980.0/TEMP)) ;
   RCONST(224) = (3.75E-13*exp(980.0/TEMP)) ;
   RCONST(225) = (3.75E-13*exp(980.0/TEMP)) ;
   RCONST(226) = (3.75E-13*exp(980.0/TEMP)) ;
   RCONST(227) = (3.75E-13*exp(980.0/TEMP)) ;
   RCONST(228) = (2.05E-13*exp(1300.0/TEMP)) ;
   RCONST(231) = (4.3E-13*exp(1040.0/TEMP)) ;
   RCONST(232) = (4.3E-13*exp(1040.0/TEMP)) ;
   RCONST(233) = (1.15E-13*exp(1300.0/TEMP)) ;
   RCONST(234) = (1.15E-13*exp(1300.0/TEMP)) ;
   RCONST(235) = (1.15E-13*exp(1300.0/TEMP)) ;
   RCONST(236) = (1.82E-13*exp(1300.0/TEMP)) ;
   RCONST(237) = (1.82E-13*exp(1300.0/TEMP)) ;
   RCONST(238) = (7.70E-14*exp(1298.0/TEMP)) ;
   RCONST(239) = (7.70E-14*exp(1298.0/TEMP)) ;
   RCONST(240) = (3.75E-13*exp(980.0/TEMP)) ;
   RCONST(242) = (3.75E-13*exp(980.0/TEMP)) ;
   RCONST(243) = (1.15E-13*exp(1300.0/TEMP)) ;
   RCONST(244) = (1.66E-13*exp(1300.0/TEMP)) ;
   RCONST(245) = (1.66E-13*exp(1300.0/TEMP)) ;
   RCONST(246) = (3.75E-13*exp(980.0/TEMP)) ;
   RCONST(247) = (1.66E-13*exp(1300.0/TEMP)) ;
   RCONST(248) = (9.50E-14*exp(390.0/TEMP)) ;
   RCONST(249) = (1.18E-13*exp(158.0/TEMP)) ;
   RCONST(250) = (9.46E-14*exp(431.0/TEMP)) ;
   RCONST(251) = (1.00E-13*exp(467.0/TEMP)) ;
   RCONST(252) = (4.34E-14*exp(633.0/TEMP)) ;
   RCONST(253) = (1.71E-13*exp(708.0/TEMP)) ;
   RCONST(254) = (1.46E-13*exp(708.0/TEMP)) ;
   RCONST(255) = (9.18E-14*exp(708.0/TEMP)) ;
   RCONST(256) = (3.56E-14*exp(708.0/TEMP)) ;
   RCONST(257) = (3.56E-14*exp(708.0/TEMP)) ;
   RCONST(258) = (3.56E-14*exp(708.0/TEMP)) ;
   RCONST(259) = (3.56E-14*exp(708.0/TEMP)) ;
   RCONST(260) = (3.56E-14*exp(708.0/TEMP)) ;
   RCONST(261) = (3.56E-14*exp(708.0/TEMP)) ;
   RCONST(262) = (3.56E-14*exp(708.0/TEMP)) ;
   RCONST(263) = (3.56E-14*exp(708.0/TEMP)) ;
   RCONST(264) = (3.40E-14*exp(221.0/TEMP)) ;
   RCONST(265) = (3.56E-14*exp(708.0/TEMP)) ;
   RCONST(266) = (3.56E-14*exp(708.0/TEMP)) ;
   RCONST(267) = (2.0E-11*exp(500.0/TEMP)) ;
   RCONST(268) = (2.0E-11*exp(500.0/TEMP)) ;
   RCONST(269) = (7.50E-13*exp(500.0/TEMP)) ;
   RCONST(270) = (6.91E-13*exp(508.0/TEMP)) ;
   RCONST(271) = (6.91E-13*exp(508.0/TEMP)) ;
   RCONST(272) = (3.40E-14*exp(221.0/TEMP)) ;
   RCONST(273) = (3.40E-14*exp(221.0/TEMP)) ;
   RCONST(274) = (3.40E-14*exp(221.0/TEMP)) ;
   RCONST(275) = (3.40E-14*exp(221.0/TEMP)) ;
   RCONST(276) = (3.56E-14*exp(708.0/TEMP)) ;
   RCONST(277) = (3.56E-14*exp(708.0/TEMP)) ;
   RCONST(278) = (3.56E-14*exp(708.0/TEMP)) ;
   RCONST(279) = (3.56E-14*exp(708.0/TEMP)) ;
   RCONST(280) = (7.50E-13*exp(500.0/TEMP)) ;
   RCONST(281) = (1.60E-13*exp(708.0/TEMP)) ;
   RCONST(282) = (9.68E-14*exp(708.0/TEMP)) ;
   RCONST(284) = (5.99E-15*exp(1510.0/TEMP)) ;
   RCONST(285) = (1.03E-12*exp(211.0/TEMP)) ;
   RCONST(286) = (6.90E-13*exp(460.0/TEMP)) ;
   RCONST(287) = (5.59E-13*exp(522.0/TEMP)) ;
   RCONST(288) = (2.47E-13*exp(683.0/TEMP)) ;
   RCONST(289) = (9.48E-13*exp(765.0/TEMP)) ;
   RCONST(290) = (8.11E-13*exp(765.0/TEMP)) ;
   RCONST(291) = (5.09E-13*exp(765.0/TEMP)) ;
   RCONST(292) = (7.40E-13*exp(765.0/TEMP)) ;
   RCONST(293) = (7.40E-13*exp(765.0/TEMP)) ;
   RCONST(294) = (7.40E-13*exp(765.0/TEMP)) ;
   RCONST(295) = (7.40E-13*exp(765.0/TEMP)) ;
   RCONST(296) = (7.40E-13*exp(765.0/TEMP)) ;
   RCONST(297) = (7.40E-13*exp(765.0/TEMP)) ;
   RCONST(298) = (7.40E-13*exp(765.0/TEMP)) ;
   RCONST(299) = (7.40E-13*exp(765.0/TEMP)) ;
   RCONST(300) = (8.40E-14*exp(221.0/TEMP)) ;
   RCONST(301) = (7.40E-13*exp(765.0/TEMP)) ;
   RCONST(302) = (7.40E-13*exp(765.0/TEMP)) ;
   RCONST(303) = (2.50E-12*exp(500.0/TEMP)) ;
   RCONST(304) = (2.50E-12*exp(500.0/TEMP)) ;
   RCONST(305) = (7.51E-13*exp(565.0/TEMP)) ;
   RCONST(306) = (7.51E-13*exp(565.0/TEMP)) ;
   RCONST(307) = (7.51E-13*exp(565.0/TEMP)) ;
   RCONST(308) = (8.40E-14*exp(221.0/TEMP)) ;
   RCONST(309) = (8.40E-14*exp(221.0/TEMP)) ;
   RCONST(310) = (8.40E-14*exp(221.0/TEMP)) ;
   RCONST(311) = (8.40E-14*exp(221.0/TEMP)) ;
   RCONST(312) = (7.40E-13*exp(765.0/TEMP)) ;
   RCONST(313) = (7.40E-13*exp(765.0/TEMP)) ;
   RCONST(314) = (7.40E-13*exp(708.0/TEMP)) ;
   RCONST(315) = (7.40E-13*exp(708.0/TEMP)) ;
   RCONST(316) = (7.51E-13*exp(565.0/TEMP)) ;
   RCONST(317) = (8.85E-13*exp(765.0/TEMP)) ;
   RCONST(318) = (5.37E-13*exp(765.0/TEMP)) ;
   RCONST(319) = (7.40E-13*exp(708.0/TEMP)) ;
   RCONST(320) = (3.40E-14*exp(1560.0/TEMP)) ;
   RCONST(358) = (2.50E-12*exp(500.0/TEMP)) ;
   RCONST(359) = (7.00E-14*exp(1000.0/TEMP)) ;
   RCONST(360) = (4.25E-14*exp(1000.0/TEMP)) ;
   RCONST(361) = (2.96E-14*exp(1000.0/TEMP)) ;
   RCONST(362) = (7.13E-17*exp(2950.0/TEMP)) ;
   RCONST(363) = (2.50E-12*exp(500.0/TEMP)) ;
   RCONST(364) = (GStruct.xCl*jrates('J_OClO',TIME,GStruct)) ;
   RCONST(365) = (GStruct.xCl*jrates('J_Cl2',TIME,GStruct)) ;
   RCONST(366) = (GStruct.xCl*jrates('J_HOCl',TIME,GStruct)) ;
   RCONST(367) = (GStruct.xCl*jrates('J_ClNO2',TIME,GStruct)) ;
   RCONST(368) = (GStruct.xCl*jrates('J_ClONO2_NO3',TIME,GStruct)) ;
   RCONST(369) = (GStruct.xCl*jrates('J_ClONO2_NO2',TIME,GStruct)) ;
   RCONST(370) = (GStruct.xCl*jrates('J_ClO_O3P',TIME,GStruct)) ;
   RCONST(371) = (GStruct.xCl*2.3E-11*exp(-200.0/TEMP)) ;
   RCONST(372) = (GStruct.xCl*1.4E-11*exp(270.0/TEMP)) ;
   RCONST(373) = (GStruct.xCl*3.6E-11*exp(-375.0/TEMP)) ;
   RCONST(374) = (GStruct.xCl*1.1E-11*exp(-980.0/TEMP)) ;
   RCONST(375) = (GStruct.xCl*RACM_TROE(TEMP,M_conc,1.3E-30,2,1E-10, ...
                  1));
   RCONST(376) = (GStruct.xCl*RACM_TROE(TEMP,M_conc,1.8E-31,2,1E-10, ...
                  1));
   RCONST(377) = (GStruct.xCl*2.4E-11*exp(-0/TEMP)) ;
   RCONST(378) = (GStruct.xCl*7.1E-12*exp(-1270/TEMP)) ;
   RCONST(379) = (GStruct.xCl*8.1E-11*exp(-30/TEMP)) ;
   RCONST(380) = (GStruct.xCl*6.5E-12*exp(135/TEMP)) ;
   RCONST(381) = (GStruct.xCl*7.4E-12*exp(270/TEMP)) ;
   RCONST(382) = (GStruct.xCl*6.0E-13*exp(230/TEMP)) ;
   RCONST(383) = (GStruct.xCl*2.6E-12*exp(290.0/TEMP)) ;
   RCONST(384) = (GStruct.xCl*GStruct.xCl*6.4E-12*exp(290.0/TEMP)) ;
   RCONST(385) = (GStruct.xCl*RACM_TROE(TEMP,M_conc,1.8E-31,3.4, ...
                  1.5E-11,1.9));
   RCONST(386) = (GStruct.xCl*1.0E-12*exp(-1590.0/TEMP)) ;
   RCONST(387) = (GStruct.xCl*3.5E-13*exp(-1370.0/TEMP)) ;
   RCONST(388) = (GStruct.xCl*3.0E-11*exp(-2450.0/TEMP)) ;
   RCONST(389) = (GStruct.xCl*2.5E-12*exp(-600.0/TEMP)) ;
   RCONST(390) = (GStruct.xCl*3.0E-12*exp(-500.0/TEMP)) ;
   RCONST(391) = (GStruct.xCl*1.8E-12*exp(-250/TEMP)) ;
   RCONST(392) = (GStruct.xCl*2.4E-12*exp(-1250.0/TEMP)) ;
   RCONST(393) = (GStruct.xCl*2.6E-12*exp(-1100.0/TEMP)) ;
   RCONST(394) = (GStruct.xCl*3.4E-12*exp(-130.0/TEMP)) ;
   RCONST(395) = (GStruct.xCl*4.7E-13) ;
   RCONST(396) = (GStruct.xCl*4.7E-13) ;
   RCONST(397) = (GStruct.xCl*1.0E-11*exp(-3300.0/TEMP)) ;
   RCONST(398) = (GStruct.xCl*1.7E-13) ;
   RCONST(399) = (GStruct.xCl*2.2E-12*exp(-920.0/TEMP)) ;
   RCONST(400) = (GStruct.xCl*7.4E-11) ;
   RCONST(401) = (GStruct.xCl*7.7E-11) ;
   RCONST(402) = (GStruct.xCl*3.2E-11*exp(170.0/TEMP)) ;
   RCONST(403) = (GStruct.xCl*1.4E-12*exp(600.0/TEMP)) ;
   RCONST(404) = (GStruct.xCl*2.8E-11*exp(85.0/TEMP)) ;
   RCONST(405) = (GStruct.xCl*3.05E-11*exp(-2270.0/TEMP)) ;
   RCONST(406) = (GStruct.xCl*3.65E-12*exp(-840.0/TEMP)) ;
   RCONST(407) = (GStruct.xCl*3.3E-10) ;
   RCONST(408) = (GStruct.xCl*1.2E-12*exp(1440.0/TEMP)) ;
   RCONST(409) = (GStruct.xCl*9.4E-11*exp(190.0/TEMP)) ;
   RCONST(410) = (GStruct.xCl*jrates('J_ClO_O1D',TIME,GStruct)) ;
   RCONST(411) = (GStruct.xCl*jrates('J_NOCl',TIME,GStruct)) ;
   RCONST(412) = (GStruct.xCl*jrates('J_HCl',TIME,GStruct)) ;
   RCONST(413) = (GStruct.xCl*jrates('J_CH3Cl',TIME,GStruct)) ;
   RCONST(414) = (GStruct.xCl*jrates('J_CCl4',TIME,GStruct)) ;
   RCONST(415) = (GStruct.xCl*jrates('J_CH3CCl3',TIME,GStruct)) ;
   RCONST(421) = (aerosol_reaction_rates(1,TIME,GStruct)) ;
   RCONST(422) = (aerosol_reaction_rates(2,TIME,GStruct)) ;
   RCONST(423) = (aerosol_reaction_rates(3,TIME,GStruct)) ;
   RCONST(424) = (aerosol_reaction_rates(4,TIME,GStruct)) ;
   RCONST(425) = (aerosol_reaction_rates(5,TIME,GStruct)) ;
   RCONST(426) = (aerosol_reaction_rates(6,TIME,GStruct)) ;
   RCONST(427) = (aerosol_reaction_rates(7,TIME,GStruct)) ;
   RCONST(428) = (aerosol_reaction_rates(8,TIME,GStruct)) ;
   RCONST(429) = (GStruct.xCl*aerosol_reaction_rates(9,TIME,GStruct)) ;
   RCONST(430) = (GStruct.xCl*aerosol_reaction_rates(10,TIME,GStruct)) ;
   RCONST(431) = (GStruct.xCl*aerosol_reaction_rates(11,TIME,GStruct)) ;
   RCONST(432) = (GStruct.xCl*aerosol_reaction_rates(12,TIME,GStruct)) ;
   RCONST(433) = (GStruct.xCl*aerosol_reaction_rates(13,TIME,GStruct)) ;
   RCONST(434) = (GStruct.xCl*aerosol_reaction_rates(14,TIME,GStruct)) ;
   RCONST = RCONST(:);
      
return

% End of Update_RCONST function                                    
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%                                                                  
% The Reaction Rates File                                          
%                                                                  
% Generated by KPP-2.2.3 symbolic chemistry Kinetics PreProcessor  
%       (http://www.cs.vt.edu/~asandu/Software/KPP)                
% KPP is distributed under GPL, the general public licence         
%       (http://www.gnu.org/copyleft/gpl.html)                     
% (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa           
% (C) 1997-2005, A. Sandu, Michigan Tech, Virginia Tech            
%     With important contributions from:                           
%        M. Damian, Villanova University, USA                      
%        R. Sander, Max-Planck Institute for Chemistry, Mainz, Germany
%                                                                  
% File                 : mech_Rates.m                              
% Time                 : Thu Sep 12 22:08:47 2019                  
% Working directory    : /proju/wrf-chem/thomas/mechanism-noHalogens
% Equation file        : mech.kpp                                  
% Output root filename : mech                                      
%                                                                  
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




% Begin Rate Law Functions from KPP_HOME/util/UserRateLaws         

%  User-defined Rate Law functions
%  Note: insert this file at the end of Update_RCONST

%---  Arrhenius
   function [rate] =  ARR( A0,B0,C0 )
      global TEMP CFACTOR
      rate =  (A0) * exp(-(B0)/TEMP) * (TEMP/300.0)^(C0) ;            
   return %  ARR        

%--- Simplified Arrhenius, with two arguments
%--- Note: The argument B0 has a changed sign when compared to ARR
   function [rate] =  ARR2( A0,B0 )
      global TEMP CFACTOR
      rate =  (A0) * exp( (B0)/TEMP ) ;             
   return %  ARR2          

   function [rate] =  EP2(A0,C0,A2,C2,A3,C3)
      global TEMP CFACTOR                       
      K0 = (A0) * exp(-C0/TEMP);
      K2 = (A2) * exp(-C2/TEMP);
      K3 = (A3) * exp(-C3/TEMP);
      K3 = K3*CFACTOR*1.0e+6;
      rate = K0 + K3/(1.0+K3/K2) ;       
   return %  EP2

   function [rate] =  EP3(A1,C1,A2,C2) 
      global TEMP CFACTOR               
      K1 = (A1) * exp(-(C1)/TEMP);
      K2 = (A2) * exp(-(C2)/TEMP);
      rate = K1 + K2*(1.0e+6*CFACTOR);      
   return %  EP3 

   function [rate] =  FALL ( A0,B0,C0,A1,B1,C1,CF)
      global TEMP CFACTOR                      
      K0 = A0 * exp(-B0/TEMP)* (TEMP/300.0)^(C0);
      K1 = A1 * exp(-B1/TEMP)* (TEMP/300.0)^(C1);
      K0 = K0*CFACTOR*1.0e+6;
      K1 = K0/K1;
      rate = (K0/(1.0+K1))*(CF)^(1.0/(1.0+(log(K1))^2));        
   return %  FALL


% End Rate Law Functions from KPP_HOME/util/UserRateLaws           


% Begin INLINED Rate Law Functions                                 


%//////////////////////////  RACM_THERMAL ///////////////////////////
function [rate_constant] =  RACM_THERMAL(temperature,A0,B0)
%////   RACM2 reaction rates have the form K = A * exp(-B / T)
%// for example - for the reaction: HO+O3 -> O2 + O2 
%// rate_constant = 1.70 x 10-12 exp(-940/T)
%// A0 = 1.70 x 10-12
%// B0 = 940
   rate_constant =  (A0) * exp(-(B0)/temperature);
return

%//////////////////////////  RACM_THERMAL_T2 ///////////////////////////
function [rate_constant] =  RACM_THERMAL_T2(temperature,A0,B0)
%///    NEEDS TO BE UPDATED
%////   RACM2 reaction rates have the form K = A * exp(-B / T)
%// for example - for the reaction: HO+O3 -> O2 + O2 
%// rate_constant = 1.70 x 10-12 exp(-940/T)
%// A0 = 1.70 x 10-12
%// B0 = 940
   rate_constant =  temperature^2. * (A0) * exp(-(B0)/temperature);
return

%//////////////////////////  RACM_TROE ///////////////////////////
function [rate_constant] =  RACM_TROE(temperature,M_conc,K0,N,KINF,M)
%//Following the definition in the NASA JPL data eval 2011, section 2.1
%//The rate constant is given by  k_f([M],T)
%//k_0_T = K0 * (T/300.)^(-N)
%//k_inf_T = KINF * (T/300.)^(-M)
%//FACTOR = [1+(log10(k_0_T AIR_CONC/k_inf_T))^2]^-1
%//rate_constant = (k_0_T AIR_CONC )/ (1 + (k_0_T AIR_CONC/k_inf_T) ) * 0.6^(FAC*exp(190.0/TEMP)
  k_0_T   = K0 * (temperature/300.)^(-N);
  k_inf_T = KINF * (temperature/300.)^(-M);
%//M_conc = get_M_CONC();
  FACTOR = ( 1  +  (  log10(  k_0_T*M_conc/k_inf_T   )  )^2. )^(-1.);
  rate_constant = (k_0_T*M_conc)/(1+(k_0_T*M_conc/k_inf_T)) * 0.6^(FACTOR); 
return

%//////////////////////////  RACM_TROE_EQUIL ///////////////////////////
function [rate_constant] =  RACM_TROE_EQUIL(temperature,M_conc,K0,N,KINF,M,A0,B0)
%//Following the definition in the NASA JPL data eval 2011
   K_TROE=RACM_TROE(temperature,M_conc,K0,N,KINF,M);Keq=A0*exp(B0/temperature);
  rate_constant = K_TROE/Keq; 
return

%//////////////////////////  RACM_reaction51 ///////////////////////////
function [rate_constant] =  RACM_reaction51(temperature)
%//table 2f from Goloffi electronic supplement - for reaction 51, pressure in Pa*exp(190.0/TEMP)
%//units of pressure - PRES_TIME_LEV is Pa
  global PRES_TIME_LEV ;
  TMP3 = 3.45E-12*exp(270./temperature);
  TMP4 = (530./temperature)+(4.8E-6)*PRES_TIME_LEV-1.73;
  rate_constant = TMP3*TMP4/100;
return

%//////////////////////////  RACM_reaction57 ///////////////////////////
function [rate_constant] =  RACM_reaction57(temperature, CM)
%//table 2f from Goloffi electronic supplement - for reaction 57
%//typo in the electornic supplement table 2f, listed as reaction 56
%//  CM = get_M_CONC();
  TMP0 = 2.4E-14*exp(460/temperature);
  TMP2 = 2.7E-17*exp(2199/temperature);
  TMP3 = 6.5E-34*exp(1335/temperature)*CM;
  rate_constant = TMP0 + TMP3/(1+TMP3/TMP2);
return


% End INLINED Rate Law Functions                                   

% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%                                                                  
% Update_SUN - update SUN light using TIME                         
%   Arguments :                                                    
%                                                                  
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function Update_SUN( )

global TIME SUN
 
   SunRise = 4.5;
   SunSet  = 19.5;
   Thour = TIME/3600.;
   Tlocal = Thour - floor(Thour/24)*24;

   if ( (Tlocal>=SunRise) & (Tlocal<=SunSet) ) 
     Ttmp = (2.0*Tlocal-SunRise-SunSet)/(SunSet-SunRise);
     if (Ttmp>0) 
       Ttmp =  Ttmp*Ttmp;
     else
       Ttmp = -Ttmp*Ttmp;
     end 
     SUN = ( 1.0 + cos(pi*Ttmp) )/2.0 ;
   else
     SUN = 0.0;
   end 

return % Update_SUN

% End of Update_SUN function                                       
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


